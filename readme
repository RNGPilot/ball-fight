Kinetiq
=======

Kinetiq is a physics-driven two-ball auto-battler. Two circular fighters bounce around a square arena with rotating melee arms, chip away each other’s HP with direct hits and DoT packets, and finish the round without any player input.

Quick start
-----------

```bash
npm install
npm run dev
```

The development server prints a local URL (default `http://localhost:5173`) that streams the canvas simulation. To build a production bundle or run the automated build check, use:

```bash
npm run build
```

If you prefer the more traditional `npm start` or need a simple success/fail script, the project also exposes:

```bash
npm start    # alias of npm run dev
npm test     # runs the build pipeline
```

Gameplay overview
-----------------

- **Arena** – 760×760 fighting space with rigid black borders inside a 900×900 canvas.
- **Fighters** – Data-driven stat blocks (HP, damage, burn DoT, shield reduction, etc.). Each fighter has a rotating arm with a circular weapon head.
- **Combat** – Weapon overlaps inflict base + hellfire damage, apply burn DoTs, and trigger shield mitigation. Direct body collisions optionally add a demon damage graze.
- **Damage over time** – Burn timers tick independently, refreshing when new hellfire hits land.
- **Win condition** – The match freezes when one fighter’s HP reaches zero. Press **R** (or click the on-screen restart button) to reset with new random velocities.

Project structure
-----------------

- `index.html` – Canvas shell with the top title bar.
- `src/main.ts` – Entry point that wires the deterministic simulation loop to rendering.
- `src/types.ts` – Shared data types and fighter stat definitions.
- `src/game.ts` – Physics integration, collisions, damage application, DoT handling, win logic.
- `src/ui.ts` – Canvas drawing routines for the arena, fighters, burn/shield effects, stat panel, and restart affordances.

The codebase is intentionally framework-light: plain TypeScript, HTML5 Canvas, and Vite for bundling.
